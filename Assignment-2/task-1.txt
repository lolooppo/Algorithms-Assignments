int HashingByDevision(int K, int N){
    return (K % N);
}

int HashingByMultiplication(int K, int N, float A){
    double fractional_part = (K*A) - floor(K*A);

    return floor(N * fractional_part);
}

int HashingByMidSquare(int K, int N){
    long long square = (long long)K * K;
    string squared_string = to_string(square);


    int r = ceil(log10(N));
    int len = squared_string.length();
    int mid_start = (len / 2) - (r / 2);

    string middle_digits = squared_string.substr(mid_start, r);
    int middle_value = stoi(middle_digits);

    return middle_value % N;
}


int HashingByFolding(int K, int N){
    string K_string = to_string(K);

    int total_partitions_sum{0};
    int partitioning_size = ceil(log10(N));
    int start_partition_idx{0};
    while(start_partition_idx < (int)K_string.length()){
        string partition = K_string.substr(start_partition_idx, partitioning_size);
        start_partition_idx += partitioning_size;
        total_partitions_sum += stoi(partition);
    }

    return total_partitions_sum % N;
}